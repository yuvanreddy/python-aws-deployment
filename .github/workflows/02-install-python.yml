name: 02 - Install Python

on:
  workflow_dispatch:
    inputs:
      python_version:
        description: 'Python version to install'
        required: false
        default: '3.11'
        type: choice
        options:
          - '3.9'
          - '3.10'
          - '3.11'
          - '3.12'
      install_pip_packages:
        description: 'Additional pip packages to install (comma-separated)'
        required: false
        default: 'boto3,requests,pandas,numpy'
        type: string
      verify_installation:
        description: 'Run verification tests after installation'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  get_infrastructure_info:
    name: Get Infrastructure Information
    runs-on: ubuntu-latest
    outputs:
      instance_ids: ${{ steps.get_outputs.outputs.instance_ids }}
      public_ips: ${{ steps.get_outputs.outputs.public_ips }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Reset DynamoDB table for state locking
        run: |
          TABLE_NAME="terraform-state-lock-python-deployment"
          REGION="${{ secrets.AWS_REGION }}"

          # If table exists, delete it to clear any stale Digest mismatches
          if aws dynamodb describe-table --table-name "$TABLE_NAME" --region "$REGION" >/dev/null 2>&1; then
            echo "🗑️ Deleting existing DynamoDB table: $TABLE_NAME"
            aws dynamodb delete-table --table-name "$TABLE_NAME" --region "$REGION"
            echo "⏳ Waiting for table to be deleted..."
            aws dynamodb wait table-not-exists --table-name "$TABLE_NAME" --region "$REGION"
            echo "✅ Deleted table: $TABLE_NAME"
          else
            echo "ℹ️ Table not found, nothing to delete: $TABLE_NAME"
          fi

          echo "🔒 Creating DynamoDB table for state locking: $TABLE_NAME"
          aws dynamodb create-table \
            --table-name "$TABLE_NAME" \
            --attribute-definitions AttributeName=LockID,AttributeType=S \
            --key-schema AttributeName=LockID,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --region "$REGION"

          echo "⏳ Waiting for table to be active..."
          aws dynamodb wait table-exists --table-name "$TABLE_NAME" --region "$REGION"
          echo "✅ DynamoDB table created successfully"

      - name: Initialize Terraform
        working-directory: terraform
        run: |
          BUCKET_NAME="terraform-state-${{ github.repository_owner }}-python-deployment"
          BUCKET_NAME=$(echo "$BUCKET_NAME" | tr '[:upper:]' '[:lower:]' | tr '_' '-')

          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_NAME"
              key            = "python-deployment/terraform.tfstate"
              region         = "${{ secrets.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "terraform-state-lock-python-deployment"
            }
          }
          EOF
          
          terraform init -reconfigure

      - name: Get Terraform outputs
        id: get_outputs
        working-directory: terraform
        run: |
          INSTANCE_IDS=$(terraform output -json instance_ids 2>/dev/null || echo "[]")
          PUBLIC_IPS=$(terraform output -json public_ips 2>/dev/null || echo "[]")
          
          echo "instance_ids=$INSTANCE_IDS" >> $GITHUB_OUTPUT
          echo "public_ips=$PUBLIC_IPS" >> $GITHUB_OUTPUT
          
          echo "📊 Found instances: $INSTANCE_IDS"

  install_python:
    name: Install Python on EC2 Instances
    needs: get_infrastructure_info
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible boto3 botocore
          ansible-galaxy collection install amazon.aws
          ansible-galaxy collection install ansible.posix
          echo "✅ Ansible installed"

      - name: Create Ansible inventory
        run: |
          mkdir -p ansible/inventory
          cat > ansible/inventory/hosts.yml << 'EOF'
          plugin: amazon.aws.aws_ec2
          regions:
            - ${{ secrets.AWS_REGION }}
          filters:
            instance-state-name: running
            tag:ManagedBy: Terraform
            tag:Project: PythonDeployment
          keyed_groups:
            - key: tags
              prefix: tag
          hostnames:
            - instance-id
          compose:
            ansible_host: public_ip_address
          EOF
          
          echo "✅ Ansible inventory created"

      - name: Create Ansible playbook
        run: |
          cat > ansible/install_python.yml << 'EOF'
          ---
          - name: Install and Configure Python
            hosts: all
            become: yes
            gather_facts: yes
            vars:
              python_version: "${{ github.event.inputs.python_version || '3.11' }}"
              pip_packages: "${{ github.event.inputs.install_pip_packages || 'boto3,requests,pandas,numpy' }}"
            
            tasks:
              - name: Update package cache (Ubuntu/Debian)
                apt:
                  update_cache: yes
                  cache_valid_time: 3600
                when: ansible_os_family == "Debian"
              
              - name: Update package cache (RHEL/CentOS/Amazon Linux)
                yum:
                  update_cache: yes
                when: ansible_os_family == "RedHat"
              
              - name: Install Python build dependencies (Ubuntu/Debian)
                apt:
                  name:
                    - build-essential
                    - libssl-dev
                    - zlib1g-dev
                    - libbz2-dev
                    - libreadline-dev
                    - libsqlite3-dev
                    - wget
                    - curl
                    - llvm
                    - libncurses5-dev
                    - libncursesw5-dev
                    - xz-utils
                    - tk-dev
                    - libffi-dev
                    - liblzma-dev
                    - python3-openssl
                    - git
                  state: present
                when: ansible_os_family == "Debian"
              
              - name: Install Python build dependencies (RHEL/CentOS/Amazon Linux)
                yum:
                  name:
                    - gcc
                    - openssl-devel
                    - bzip2-devel
                    - libffi-devel
                    - zlib-devel
                    - wget
                    - make
                  state: present
                when: ansible_os_family == "RedHat"
              
              - name: Install Python {{ python_version }}
                block:
                  - name: Add deadsnakes PPA (Ubuntu)
                    apt_repository:
                      repo: ppa:deadsnakes/ppa
                      state: present
                    when: ansible_distribution == "Ubuntu"
                  
                  - name: Install Python {{ python_version }} (Ubuntu)
                    apt:
                      name:
                        - python{{ python_version }}
                        - python{{ python_version }}-venv
                        - python{{ python_version }}-dev
                        - python3-pip
                      state: present
                    when: ansible_os_family == "Debian"
                  
                  - name: Install Python {{ python_version }} (RHEL/CentOS/Amazon Linux)
                    yum:
                      name:
                        - python3
                        - python3-pip
                        - python3-devel
                      state: present
                    when: ansible_os_family == "RedHat"
              
              - name: Upgrade pip
                pip:
                  name: pip
                  state: latest
                  executable: pip3
              
              - name: Install pip packages
                pip:
                  name: "{{ item }}"
                  state: present
                  executable: pip3
                loop: "{{ pip_packages.split(',') }}"
                when: pip_packages != ""
              
              - name: Create Python test script
                copy:
                  content: |
                    #!/usr/bin/env python3
                    import sys
                    import platform
                    import json
                    
                    info = {
                        "python_version": platform.python_version(),
                        "platform": platform.platform(),
                        "processor": platform.processor(),
                        "hostname": platform.node(),
                        "python_path": sys.executable
                    }
                    
                    print(json.dumps(info, indent=2))
                    
                    # Test installed packages
                    packages = "${{ github.event.inputs.install_pip_packages || 'boto3,requests,pandas,numpy' }}".split(',')
                    installed = []
                    missing = []
                    
                    for package in packages:
                      package = package.strip()
                      if package:
                        try:
                          __import__(package.replace('-', '_'))
                          installed.append(package)
                        except ImportError:
                          missing.append(package)
                    
                    print(f"\nInstalled packages: {installed}")
                    if missing:
                      print(f"Missing packages: {missing}")
                      sys.exit(1)
                    else:
                      print("All required packages are installed successfully!")
                  dest: /tmp/test_python.py
                  mode: '0755'
              
              - name: Run Python test script
                command: python3 /tmp/test_python.py
                register: python_test
                changed_when: false
              
              - name: Display Python test results
                debug:
                  msg: "{{ python_test.stdout }}"
          EOF
          
          echo "✅ Ansible playbook created"

      - name: Wait for instances to be SSH ready
        run: |
          INSTANCE_IDS='${{ needs.get_infrastructure_info.outputs.instance_ids }}'
          echo "⏳ Waiting for SSH to be ready on all instances..."
          
          echo "$INSTANCE_IDS" | jq -r '.[]' | while read -r instance_id; do
            PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids "$instance_id" \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            
            if [ "$PUBLIC_IP" != "None" ] && [ -n "$PUBLIC_IP" ]; then
              echo "Waiting for SSH on $instance_id ($PUBLIC_IP)..."
              timeout 300 bash -c "until nc -zv $PUBLIC_IP 22 2>/dev/null; do sleep 5; done"
              echo "✅ SSH is ready on $instance_id"
            fi
          done

      - name: Run Ansible playbook
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
          ANSIBLE_PYTHON_INTERPRETER: auto_silent
        run: |
          cd ansible
          echo "🚀 Installing Python on all instances..."
          
          # Create ansible.cfg
          cat > ansible.cfg << EOF
          [defaults]
          host_key_checking = False
          interpreter_python = auto_silent
          remote_user = ubuntu
          private_key_file = ~/.ssh/id_rsa
          timeout = 30
          
          [ssh_connection]
          ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o StrictHostKeyChecking=no
          pipelining = True
          EOF
          
          # Run playbook using AWS SSM
          ansible-playbook install_python.yml \
            -i inventory/hosts.yml \
            --connection aws_ssm \
            --extra-vars "ansible_aws_ssm_region=${{ secrets.AWS_REGION }}" \
            -v
          
          echo "✅ Python installation completed"

  verify_installation:
    name: Verify Python Installation
    needs: [get_infrastructure_info, install_python]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.verify_installation != 'false' }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify Python on all instances
        run: |
          INSTANCE_IDS='${{ needs.get_infrastructure_info.outputs.instance_ids }}'
          echo "🔍 Verifying Python installation on all instances..."
          
          FAILED_INSTANCES=""
          
          echo "$INSTANCE_IDS" | jq -r '.[]' | while read -r instance_id; do
            echo "----------------------------------------"
            echo "Verifying instance: $instance_id"
            
            # Send command to check Python
            COMMAND_ID=$(aws ssm send-command \
              --instance-ids "$instance_id" \
              --document-name "AWS-RunShellScript" \
              --parameters 'commands=["python3 --version","pip3 --version","pip3 list"]' \
              --output text \
              --query 'Command.CommandId')
            
            # Wait for command to complete
            sleep 5
            
            # Get command result
            STATUS=$(aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "$instance_id" \
              --query 'Status' \
              --output text)
            
            if [ "$STATUS" == "Success" ]; then
              OUTPUT=$(aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "$instance_id" \
                --query 'StandardOutputContent' \
                --output text)
              
              echo "✅ Python verified on $instance_id:"
              echo "$OUTPUT"
            else
              echo "❌ Failed to verify Python on $instance_id"
              FAILED_INSTANCES="$FAILED_INSTANCES $instance_id"
            fi
          done
          
          if [ -n "$FAILED_INSTANCES" ]; then
            echo "⚠️ Failed instances: $FAILED_INSTANCES"
            exit 1
          else
            echo "✅ Python successfully installed and verified on all instances!"
          fi

      - name: Summary
        run: |
          echo "========================================="
          echo "✅ PYTHON INSTALLATION COMPLETE"
          echo "========================================="
          echo "Python Version: ${{ github.event.inputs.python_version || '3.11' }}"
          echo "Installed Packages: ${{ github.event.inputs.install_pip_packages || 'boto3,requests,pandas,numpy' }}"
          echo "========================================="
          echo "Next steps:"
          echo "1. Your instances are ready for Python workloads"
          echo "2. To destroy infrastructure, run '03 - Destroy Infrastructure' workflow"
          echo "========================================="