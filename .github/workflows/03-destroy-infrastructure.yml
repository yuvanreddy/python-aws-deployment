name: 03 - Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm infrastructure destruction'
        required: true
        type: string
      backup_before_destroy:
        description: 'Create backup of configuration before destroying'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  destroy_infrastructure:
    name: Destroy AWS Infrastructure
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm_destroy == 'DESTROY' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: terraform
        run: |
          BUCKET_NAME="terraform-state-${{ github.repository_owner }}-python-deployment"
          BUCKET_NAME=$(echo "$BUCKET_NAME" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "$BUCKET_NAME"
              key            = "python-deployment/terraform.tfstate"
              region         = "${{ secrets.AWS_REGION }}"
              encrypt        = true
              dynamodb_table = "terraform-state-lock-python-deployment"
            }
          }
          EOF
          
          terraform init -reconfigure
          echo "‚úÖ Terraform initialized"

      - name: Create backup before destroy
        if: ${{ github.event.inputs.backup_before_destroy == 'true' }}
        working-directory: terraform
        run: |
          echo "üì¶ Creating backup of current infrastructure state..."
          
          # Create backup directory
          BACKUP_DIR="../backups/$(date +%Y%m%d_%H%M%S)"
          mkdir -p "$BACKUP_DIR"
          
          # Export current state
          terraform state pull > "$BACKUP_DIR/terraform.tfstate.json"
          
          # Export outputs
          terraform output -json > "$BACKUP_DIR/outputs.json"
          
          # List all resources
          terraform state list > "$BACKUP_DIR/resources.txt"
          
          # Get instance details before destruction
          INSTANCE_IDS=$(terraform output -json instance_ids 2>/dev/null || echo "[]")
          echo "$INSTANCE_IDS" | jq -r '.[]' | while read -r instance_id; do
            if [ -n "$instance_id" ]; then
              aws ec2 describe-instances \
                --instance-ids "$instance_id" \
                --output json > "$BACKUP_DIR/instance_${instance_id}.json" 2>/dev/null || true
            fi
          done
          
          echo "‚úÖ Backup created in: $BACKUP_DIR"
          
          # Upload backup as artifact
          cd ..
          tar -czf backup.tar.gz backups/
          echo "BACKUP_FILE=backup.tar.gz" >> $GITHUB_ENV

      - name: Upload backup artifact
        if: ${{ github.event.inputs.backup_before_destroy == 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: infrastructure-backup-${{ github.run_number }}
          path: backup.tar.gz
          retention-days: 30

      - name: List resources to be destroyed
        working-directory: terraform
        run: |
          echo "========================================="
          echo "üóëÔ∏è RESOURCES TO BE DESTROYED:"
          echo "========================================="
          terraform state list || echo "No resources found in state"
          echo "========================================="
          
          # Show the destruction plan
          terraform plan -destroy \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="key_pair_name=${{ secrets.KEY_PAIR_NAME }}" \
            -var="instance_count=0" \
            -var="instance_type=t3.micro" \
            -var="os_type=ubuntu" \
            -out=destroy.tfplan

      - name: Destroy infrastructure
        working-directory: terraform
        run: |
          echo "üí• Destroying all infrastructure..."
          terraform destroy \
            -auto-approve \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="key_pair_name=${{ secrets.KEY_PAIR_NAME }}" \
            -var="instance_count=0" \
            -var="instance_type=t3.micro" \
            -var="os_type=ubuntu"
          
          echo "‚úÖ Infrastructure destroyed successfully"

      - name: Verify destruction
        run: |
          echo "üîç Verifying infrastructure destruction..."
          
          # Check for any remaining instances with our tags
          REMAINING_INSTANCES=$(aws ec2 describe-instances \
            --filters "Name=tag:ManagedBy,Values=Terraform" \
                     "Name=tag:Project,Values=PythonDeployment" \
                     "Name=instance-state-name,Values=running,pending,stopping,stopped" \
            --query 'Reservations[].Instances[].InstanceId' \
            --output json 2>/dev/null || echo "[]")
          
          if [ "$REMAINING_INSTANCES" != "[]" ] && [ -n "$REMAINING_INSTANCES" ]; then
            echo "‚ö†Ô∏è Warning: Found remaining instances: $REMAINING_INSTANCES"
          else
            echo "‚úÖ No remaining instances found"
          fi
          
          # Check for VPCs
          REMAINING_VPCS=$(aws ec2 describe-vpcs \
            --filters "Name=tag:ManagedBy,Values=Terraform" \
                     "Name=tag:Project,Values=PythonDeployment" \
            --query 'Vpcs[].VpcId' \
            --output json 2>/dev/null || echo "[]")
          
          if [ "$REMAINING_VPCS" != "[]" ] && [ -n "$REMAINING_VPCS" ]; then
            echo "‚ö†Ô∏è Warning: Found remaining VPCs: $REMAINING_VPCS"
          else
            echo "‚úÖ No remaining VPCs found"
          fi

      - name: Clean up Terraform backend (optional)
        continue-on-error: true
        run: |
          echo "üßπ Cleaning up Terraform backend..."
          
          # Remove state file from S3
          BUCKET_NAME="terraform-state-${{ github.repository_owner }}-python-deployment"
          BUCKET_NAME=$(echo "$BUCKET_NAME" | tr '[:upper:]' '[:lower:]' | tr '_' '-')
          
          aws s3 rm "s3://$BUCKET_NAME/python-deployment/terraform.tfstate" --region ${{ secrets.AWS_REGION }} || true
          
          echo "‚ÑπÔ∏è Note: S3 bucket and DynamoDB table are retained for future use"
          echo "To completely remove them, delete manually:"
          echo "  - S3 Bucket: $BUCKET_NAME"
          echo "  - DynamoDB Table: terraform-state-lock-python-deployment"

      - name: Summary
        run: |
          echo "========================================="
          echo "‚úÖ INFRASTRUCTURE DESTRUCTION COMPLETE"
          echo "========================================="
          echo "Timestamp: $(date)"
          if [ "${{ github.event.inputs.backup_before_destroy }}" == "true" ]; then
            echo "Backup: Created and uploaded as artifact"
          fi
          echo "========================================="
          echo "All resources have been destroyed."
          echo "To recreate infrastructure, run '01 - Create AWS Infrastructure' workflow"
          echo "========================================="

  safety_check:
    name: Safety Check
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm_destroy != 'DESTROY' }}
    
    steps:
      - name: Destruction not confirmed
        run: |
          echo "========================================="
          echo "‚ùå DESTRUCTION CANCELLED"
          echo "========================================="
          echo "You entered: '${{ github.event.inputs.confirm_destroy }}'"
          echo "To destroy infrastructure, you must type exactly: DESTROY"
          echo "========================================="
          echo "This safety check prevents accidental infrastructure deletion."
          echo "Please run the workflow again with proper confirmation."
          echo "========================================="
          exit 1